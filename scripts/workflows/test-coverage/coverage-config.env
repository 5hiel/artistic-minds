# Daily Test Coverage Analysis Configuration
# Copy this file and set your preferences
#
# Usage: source coverage-config.env && node analyze-coverage.js

# Coverage Thresholds
# Minimum line coverage percentage to avoid creating issues (default: 70)
MIN_LINE_COVERAGE=70

# Minimum function coverage percentage (default: 60)
MIN_FUNCTION_COVERAGE=60

# Minimum branch coverage percentage (default: 50)
MIN_BRANCH_COVERAGE=50

# Issue Management
# Maximum number of issues to create per analysis run (prevents spam)
MAX_ISSUES_PER_RUN=5

# Whether to create GitHub issues automatically (true/false)
CREATE_GITHUB_ISSUES=true

# Issue labels to apply to created issues (comma-separated)
ISSUE_LABELS="test-coverage,auto-generated,needs-attention"

# GitHub Configuration
# Use your existing token
GITHUB_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN}

# File Patterns
# Folder to analyze for coverage (default: lib)
LIB_FOLDER=lib

# Test folder location (default: __tests__)
TEST_FOLDER=__tests__

# Coverage report file location (default: coverage/lcov.info)
COVERAGE_FILE=coverage/lcov.info

# Output Configuration
# Report file location (default: coverage-analysis-report.json)
REPORT_FILE=coverage-analysis-report.json

# Log file location (default: logs/coverage-analysis.log)
LOG_FILE=logs/coverage-analysis.log

# Analysis Preferences
# Run in verbose mode by default (true/false)
VERBOSE_MODE=false

# Skip index.ts files (they're usually just exports)
SKIP_INDEX_FILES=true

# Minimum file size to analyze (lines of code)
MIN_FILE_SIZE=10

# Priority Thresholds
# Critical priority threshold (0-100%)
CRITICAL_THRESHOLD=10

# High priority threshold (0-100%)
HIGH_THRESHOLD=30

# Medium priority threshold (0-100%)
MEDIUM_THRESHOLD=60

# Advanced Configuration
# Test command to generate coverage (default: npm test -- --coverage --silent)
TEST_COMMAND="npm test -- --coverage --silent"

# Test timeout in milliseconds (default: 300000 = 5 minutes)
TEST_TIMEOUT=300000

# GitHub API rate limiting delay between requests (milliseconds)
GITHUB_API_DELAY=1000

# Enable performance analysis in reports (true/false)
ENABLE_PERFORMANCE_ANALYSIS=true

# Include file complexity metrics in analysis (true/false)
INCLUDE_COMPLEXITY_METRICS=true

# Notification Settings (optional)
# Slack webhook URL for notifications
SLACK_WEBHOOK_URL=

# Discord webhook URL for notifications
DISCORD_WEBHOOK_URL=

# Email for critical coverage alerts
NOTIFICATION_EMAIL=

# File Type Specific Settings
# Minimum coverage for puzzle files (they're complex)
PUZZLE_FILE_MIN_COVERAGE=60

# Minimum coverage for adaptive engine files (critical)
ADAPTIVE_ENGINE_MIN_COVERAGE=80

# Minimum coverage for service files (integration heavy)
SERVICE_FILE_MIN_COVERAGE=70

# Minimum coverage for storage files (data integrity)
STORAGE_FILE_MIN_COVERAGE=85

# Exclusion Patterns
# Files to exclude from analysis (regex patterns, one per line)
# Examples:
# .*\.d\.ts$          # TypeScript definition files
# .*\/index\.ts$      # Index files
# .*\/types\.ts$      # Type definition files
# test-utils\/.*      # Test utility files
EXCLUDE_PATTERNS=".*\.d\.ts$,.*\/index\.ts$"

# Example configuration for different environments:

# Development environment (more lenient)
# MIN_LINE_COVERAGE=50
# MAX_ISSUES_PER_RUN=10
# VERBOSE_MODE=true

# Production environment (strict)
# MIN_LINE_COVERAGE=80
# MIN_FUNCTION_COVERAGE=75
# MIN_BRANCH_COVERAGE=60
# MAX_ISSUES_PER_RUN=3

# CI/CD environment (automated)
# CREATE_GITHUB_ISSUES=true
# VERBOSE_MODE=false
# ENABLE_PERFORMANCE_ANALYSIS=true