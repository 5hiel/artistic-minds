# GitHub Bug Analysis Configuration
# Copy this file and set your preferences
#
# Usage: source bug-config.env && node analyze-bugs.js

# Analysis Parameters
# Days back to analyze for bug reports (default: 30)
DAYS_BACK=30

# Include closed issues in analysis (true/false)
INCLUDE_CLOSED_ISSUES=true

# Maximum number of recommendations to create per run (prevents spam)
MAX_RECOMMENDATIONS_PER_RUN=5

# GitHub Configuration
# Use your existing GitHub token
GITHUB_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN}

# GitHub repository (auto-detected from git remote)
# GITHUB_OWNER=your-username
# GITHUB_REPO=your-repo-name

# AI Analysis Configuration
# OpenAI API key for AI-powered recommendations (optional)
OPENAI_API_KEY=${OPENAI_API_KEY}

# AI model to use for analysis (default: gpt-3.5-turbo)
AI_MODEL=gpt-3.5-turbo

# Enable AI analysis (true/false)
ENABLE_AI_ANALYSIS=true

# Bug Pattern Analysis
# Minimum number of similar bugs to trigger pattern detection
MIN_PATTERN_THRESHOLD=3

# Minimum confidence score for AI recommendations (0-1)
MIN_CONFIDENCE_SCORE=0.7

# Issue Labels
# Labels to identify bug reports (comma-separated)
BUG_LABELS="bug-report,crashes,bug,defect,issue,error,problem"

# Labels for severity classification
SEVERITY_LABELS="critical-feedback,high-priority,medium-priority,low-priority"

# Component labels for categorization
COMPONENT_LABELS="puzzle-generation,power-surge-system,adaptive-learning,level-progression,scoring-system,ui-ux-feedback,performance-issue,accessibility,ios-specific,android-specific,web-version"

# Output Configuration
# Report file location (default: bug-analysis-report.json)
REPORT_FILE=bug-analysis-report.json

# Testing recommendations file
RECOMMENDATIONS_FILE=testing-recommendations.json

# Log file location (default: logs/bug-analysis.log)
LOG_FILE=logs/bug-analysis.log

# Analysis Preferences
# Run in verbose mode by default (true/false)
VERBOSE_MODE=false

# Create GitHub issues for recommendations (true/false)
CREATE_GITHUB_ISSUES=true

# Dry run mode - don't create actual issues (true/false)
DRY_RUN=false

# GitHub API rate limiting delay between requests (milliseconds)
GITHUB_API_DELAY=1000

# Testing Integration
# Test command to verify recommendations (optional)
TEST_COMMAND="npm test"

# Coverage command to analyze test gaps (optional)
COVERAGE_COMMAND="npm test -- --coverage --silent"

# Minimum test coverage threshold for recommendations
MIN_COVERAGE_THRESHOLD=60

# Priority Thresholds
# Critical priority threshold (number of similar bugs)
CRITICAL_BUG_THRESHOLD=5

# High priority threshold (number of similar bugs)
HIGH_BUG_THRESHOLD=3

# Medium priority threshold (number of similar bugs)
MEDIUM_BUG_THRESHOLD=2

# Advanced Configuration
# Enable pattern detection across bug categories
ENABLE_CROSS_CATEGORY_ANALYSIS=true

# Include issue comments in analysis (increases API usage)
ANALYZE_ISSUE_COMMENTS=true

# Maximum age of bugs to consider for patterns (days)
MAX_BUG_AGE=90

# Minimum issue body length to analyze (characters)
MIN_ISSUE_BODY_LENGTH=50

# Notification Settings (optional)
# Slack webhook URL for notifications
SLACK_WEBHOOK_URL=

# Discord webhook URL for notifications
DISCORD_WEBHOOK_URL=

# Email for critical bug alerts
NOTIFICATION_EMAIL=

# File Pattern Analysis
# Source code patterns to analyze for testing gaps
SOURCE_PATTERNS="lib/**/*.ts,app/**/*.tsx,hooks/**/*.ts"

# Test file patterns to analyze coverage
TEST_PATTERNS="__tests__/**/*.test.ts,__tests__/**/*.test.tsx"

# Exclude patterns from analysis (regex patterns, comma-separated)
EXCLUDE_PATTERNS=".*\\.d\\.ts$,.*\\/index\\.ts$,.*\\/types\\.ts$"

# Recommendation Templates
# Template for testing improvement issues
ISSUE_TITLE_TEMPLATE="ðŸ§ª Testing: Improve coverage for {component} - {category}"

# Priority-based label assignment
PRIORITY_LABEL_MAPPING="critical:critical-feedback,high:high-priority,medium:medium-priority,low:low-priority"

# AI Prompt Configuration
# Custom prompt for bug pattern analysis (advanced users)
AI_ANALYSIS_PROMPT="Analyze these GitHub issues to identify common patterns, root causes, and recommend specific testing improvements to prevent similar bugs."

# Custom prompt for testing recommendations
TESTING_RECOMMENDATIONS_PROMPT="Based on the bug analysis, suggest specific test cases, testing strategies, and coverage improvements to prevent these types of issues."

# Example configurations for different environments:

# Development environment (more comprehensive analysis)
# DAYS_BACK=7
# INCLUDE_CLOSED_ISSUES=false
# MAX_RECOMMENDATIONS_PER_RUN=10
# VERBOSE_MODE=true
# MIN_PATTERN_THRESHOLD=2

# Production environment (focused analysis)
# DAYS_BACK=30
# INCLUDE_CLOSED_ISSUES=true
# MAX_RECOMMENDATIONS_PER_RUN=3
# ENABLE_AI_ANALYSIS=true
# MIN_CONFIDENCE_SCORE=0.8

# CI/CD environment (automated)
# CREATE_GITHUB_ISSUES=true
# DRY_RUN=false
# VERBOSE_MODE=false
# ENABLE_CROSS_CATEGORY_ANALYSIS=true